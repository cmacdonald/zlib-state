# This workflow will install Python dependencies, and runs tests with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Continuous Integration

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, '3.10']
        os: ['ubuntu-latest', 'windows-latest', 'macOs-latest']
        architecture: ['x64']

    runs-on: ${{ matrix.os }}
    steps:

    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: install-windows
      if: matrix.os == 'windows-latest'
      run: |
        powershell -Command "(New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/horta/zlib.install/master/install.bat', 'install.bat')"; ./install.bat
        "%VS140COMNTOOLS%../../VC/vcvarsall.bat"
        echo "$INCLUDE"
        set INCLUDE "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10240.0/ucrt"
        python setup.py bdist
        pip install --timeout=120 -vv .
    - name: install-unix
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOs-latest'
      run: |
        python setup.py bdist
        pip install --timeout=120 .
    - name: Test-unix with pytest
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOs-latest'
      run: |
        pip install pytest
        pytest test/test.py
    - name: Test-windows with pytest
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        pip install pytest
        pytest test\test.py
      env:
        PATH: 'C:/Program Files/zlib/bin/'

  # build_sdist:
  #   name: Build SDist
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #     with:
  #       submodules: true    # Optional if you have submodules

  #   - name: Setup Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8

  #   - name: Install deps
  #     run: python -m pip install "setuptools>=42" "setuptools_scm[toml]>=4.1.0"

  #   - name: Build SDist
  #     run: python setup.py sdist

  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: sdist.zip
  #       path: dist/*.tar.gz

  # build_wheels:
  #   name: Build wheels on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-18.04, windows-latest, macos-latest]

  #   steps:
  #   - uses: actions/checkout@v1
  #     with:
  #       submodules: true

  #   - name: Setup Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8

  #   - name: Install cibuildwheel
  #     run: python -m pip install cibuildwheel==1.7.1

  #   - name: Build wheel
  #     run: python -m cibuildwheel --output-dir wheelhouse
  #     env:
  #       CIBW_SKIP: '*cp27*'
  #       CIBW_BEFORE_BUILD: yum install -y zlib

  #   - name: Upload wheels
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: bdist-${{ matrix.os }}.zip
  #       path: wheelhouse/*.whl
